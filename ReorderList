/*
 Author:     Matthew Jin, marthew777@gmail.com
 Date:       
 Problem:    Reorder List
 Difficulty: Easy
 Source:     http://oj.leetcode.com/problems/
 Notes:
 Reorder List Total Accepted: 3683 Total Submissions: 20189 My Submissions
 Given a singly linked list L: L0→L1→…→Ln-1→Ln,
				reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

 You must do this in-place without altering the nodes' values.

 For example,
 Given {1,2,3,4}, reorder it to {1,4,2,3}.
 Solution: ...
*/
class Solution {
public:
    void reorderList(ListNode *head) {
        if(!head || !head->next || !head->next->next)
            return;
        ListNode *slow = head, *fast = head, *tail = NULL;
        while(fast && fast->next){
            tail = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        if(fast) tail = tail->next;
        ListNode *rHead = reverse(tail->next);
        tail->next = NULL;
        ListNode *rh = rHead, *lh = head;
        while(rh){
            ListNode *ln = lh->next, *rn = rh->next;
            lh->next = rh;
            rh->next = ln;
            lh=ln;
            rh=rn;
        }
    }
    ListNode *reverse(ListNode* head){
        ListNode *prev=NULL, *cur=head;
        while(cur){
            ListNode *next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
};
