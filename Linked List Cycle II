/*
 Author:     Matthew Jin, marthew777@gmail.com
 Date:       
 Problem:    Linked List Cycle II
 Difficulty: Easy
 Source:     http://leetcode.com/onlinejudge
 Notes:
	Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
	Follow up: Can you solve it without using extra space?
 Solution:   ...
*/
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *slow=head, *fast=head;
        if(!head || !head->next) return NULL;
        while(fast&&fast->next){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast) break;
        }
        if(slow!=fast) return NULL;
        fast=head;
        while(fast!=slow){
            fast=fast->next;
            slow=slow->next;
        }
        return slow;
    }
};
